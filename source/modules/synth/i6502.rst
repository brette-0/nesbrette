``i6502`` & ``i6502x``
----------------------

Because the value at any index in an `Identity Table <https://www.nesdev.org/wiki/Identity_table>`_ is the same as the index, it is possible to use our GPRs as operands for read only instructions. The table required is only ``256`` bytes in size, if page aligned they should all complete in ``4`` cycles taking up ``3`` bytes except for ``laxi`` which only takes ``3`` cycles.

.. TODO: Add Mapper Dependant idtable assisted macros for bus conflict solving MMC commands


``txy`` - Transfer X to Y
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    ldx #$10
    ldy #$20
    txy         ; y => $10

``tyx`` - Transfer Y to X
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    ldy #$10
    ldx #$20
    tyx         ; x => $10

.. note::
    Since ``i6502`` is IDTable assisted there is no stack use here, making it faster and smaller than existing ``txy``/``tyx`` methods that depend on ``pha=>tya=>tax=>pla``.

``sev`` - Set Overflow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    sev         ; v => 1

.. note::
    This performs ``biti $40`` and therefore if you wish to set both Overflow and Negative then you can use ``biti $c0`` .


``adc r`` - Add R with Carry
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    adc x
    adc y

``sbc r`` - Subtract R with Carry
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    sbc x
    sbc y

``cmp r`` - Compare against R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    cmp x
    cmp y

``and r`` - Mask by R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    and x
    and y

``ora r`` - Set bits R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    ora x
    ora y

``eor r`` - Bitflip by R
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    eor x
    eor y
