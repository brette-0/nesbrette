``s6502``
=====================================

The following instructions are synthetic instructions mostly found and created elsewhere but given a mneumonic by ``nesbrette``. These should **not** be used for the majority case as they complete typical functions with additional overhead suited for few use cases.

``sasl`` - Signed Arithmetic Left Shift
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lda #$f4
    sasl        ; a => $f8

``slsr`` - Signed Arithmetic Right Shift
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lda #$f8
    slsr        ; a => $f4

``neg`` - Make Negative
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lda #$05
    neg         ; a => $fb, -$05

.. note::
    This is different to simply ``eor #$ff`` as that yields a difference of ``1`` from the target, this process normally takes ``6`` cycles but if carry is passed with ``neg 0/1`` then it only takes ``4`` cycles.

``ccf`` - Complement Carry
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    clc
    ccf         ; c => 1 
    ccf         ; c => 0

``iror`` - Inner Right Roll
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lda #$81
    iror        ; a => $50

``irol`` - Inner Left Roll
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lda #$81
    irol        ; a => $03

.. note::
    It should be noted that ``irol`` is twice as fast as ``iror`` and this cannot be helped.

``labs`` - Load A Always Absolute
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    label = $01
    labs label  ; PC: lda $0801
    labs label, x
                ; PC: lda $0801, x
    labs label, y
                ; PC: lda $0801, y
    labs label, r
                ; PC : lda $0801, y|x

``lybs`` - Load Y Always Absolute
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    label = $01
    lybs label  ; PC: ldy $0801
    lybs label, x
                ; PC: ldy $0801, x

``lxbs`` - Load X Always Absolute
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    label = $01
    lxbs label  ; PC: ldx $0801
    lxbs label, y
                ; PC: ldx $0801, y


``sabs`` - Store A Always Absolute
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    label = $01
    sabs label  ; PC: sta $0801
    sabs label, x
                ; PC: sta $0801, x
    sabs label, y
                ; PC: sta $0801, y
    sabs label, r
                ; PC : sta $0801, y|x

``sybs`` - Store Y Always Absolute
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    label = $01
    sybs label  ; PC: sty $0801

``sxbs`` - Store X Always Absolute
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    label = $01
    sxbs label  ; PC: stx $0801

.. note::
    All 'Always Absolute' regions utilise the first system RAM Mirror available, considering the use of indexing this prevents any dummy reads/writes on PPU Registers.