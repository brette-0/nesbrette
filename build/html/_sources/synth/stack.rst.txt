``synth::stack``
=====================================

Typically the stack is used by interrupts, calling, returning and pushing temporaries to free up the Accumolator, but there exists methodologies, optimisations and features of the 6502 that can be created with clever stack manipulation.

``ldstat`` - Load CPU Status Flags
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    ldstat
    cmp #bf     ; break flag
    beq @handler; handle brk IRQs within IRQ vector
    

``ststat`` - Store CPU Status Flags
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    ldstat
    ora #$bf    ; enable break for next IRQ
    ststat      ; apply changes
    
``callback`` - Allocate Callback
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    @body:      ; example 'foo' function
        lda #$10
        sta Example
        rts

    @main:
        jsr @body
                ; justifies 'rts' at @body
        bne @main
                ; justifies calling @body as logic cannot be simplified
        callback @main
                ; pushes @main onto stack for next return
        jmp @body
                ; jumps to target, returns to prevent stack corruption

.. note::
    There are situations in which simply making the called function jump instead of return can prevent this complication, however, this is not true for all circumstances making this very useful.
``lds`` - Load Register with Stack Pointer at Stack
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lds         ; load stack at SP
    sta $00
    lds 1       ; load (stack + 1) at SP
    sta $01
    jmp ($0000) ; jump to caller

``sts`` - Store Register Value at Stack Pointer in Stack
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    ; assume cycle-timed irq counter expiry
    lda #.hibyte $addr
    sts 1
    lda #.lobyte $addr
    sts 2       ; modify return address from interrupt
    rti

``des`` - Decrement Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    ; assume $100, SP holds (target + 1)
    des
    pla         ; a => target

``ins`` - Increment Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    ; assume $100, SP holds (target - 1)
    ins
    pla         ; a => target
.. note::
    It should be noted that ``irol`` is twice as fast as ``iror`` and this cannot be helped.

``cps`` - Compare Against Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lda #$80
    cps
    bcs @negative
                ; handle negative temps differently, preserve Accumolator freedom

``ads`` - Add Stack at Stack Pointer with Carry
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    clc
    ads 1
    ads 2, 1
    ads 3, 1    ; sum combo scores

``sbs`` - Subtract Stack at Stack Pointer with Carry
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    sec
    sbs 1
    sbs 2, 1
    sbs 3, 1    ; deduct penalties


``ans`` - Bitmask/and by Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    IO_DEBUFFER
        lda payload
        ans     ; mask out task missing permissions
        sta io::device

``ors`` - Bitset/or by Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lda Player
    ror
    ror
    ror
    ora #$80    ; p1 => $00 | p2 => $40
    ors         ; bitset highbyte
    sts         ; redirect callback to 'implied PRG mirror'


``eos`` - Bitflip/eor/xor by Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lds
    eos 1
    pha ; push delta of $100, SP & $101, SP


``rss`` - Right Shift Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lda shrunk
    beq @ahead

    rss ; shrink buffered force


``lss`` - Left Shift by Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lda supersize
    beq @ahead

    lss ; grow buffered force


``lrs`` - Left Roll Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    lrs
    bcc @positive
    ; handle based on sign (d6=>d7 now available through N on next load)


``lrr`` - Right Roll Stack at Stack Pointer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: 

    rol
    lrr
    clc ; signed right roll stack by A


.. note::
    Many of these have little to no use or may indicate an irregular methodology if used. Seriously evaluate the complexity of your task before utilising the obscurer of these.